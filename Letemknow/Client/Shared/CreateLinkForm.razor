@using Base36Library;
@inject NavigationManager NavigationManager
@inject ILinkClient Client
<form>
    <div class="form-group">
        <label for="title">Title</label>
        <input type="title" @bind-value="Model.Title" id="title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="description">Descriptio<span @onclick="GenerateFakeData">n</span></label>
        <input type="description" @bind-value="Model.Description" id="description" class="form-control" />
    </div>
    <div class="form-group">
        <label for="toEmail">Recipient Email Address</label>
        <input type="email" @bind-value="Model.Recipient" id="toEmail" class="form-control" placeholder="name@example.com" />
    </div>
    <div class="form-group">
        <label for="subject">Subject</label>
        <input type="text" @bind-value="Model.Subject" id="subject" class="form-control" placeholder="Subject" />
    </div>
    <div class="form-group">
        <label for="body">Body</label>
        <textarea @bind="Model.Body" class="form-control" id="body" rows="5"></textarea>
    </div>
    <div class="form-group">
        <label>Link ID</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">@linkBaseUri</div>
            </div>
            <input typeof="text" @bind-value="Model.Id" class="form-control" />
        </div>
    </div>
    <button type="button" @onclick="CreateLinkAsync" class="btn btn-primary">Create Link</button>
</form>

@if (linkHref is string)
{
    <div>
        <a href="@linkHref">@linkHref</a>
    </div>
    <div>
        <QRCode Link="@linkHref" />
    </div>
}
@code {
    private MailLink Model = new();
    private string linkBaseUri = string.Empty;
    private string? linkHref;

    protected override void OnInitialized()
    {
        linkBaseUri = this.NavigationManager.BaseUri;
        Model.Id = CreateId();
    }

    private async Task CreateLinkAsync()
    {
        await Client.SubmitLinkAsync(Model);
        linkHref = $"{linkBaseUri}{Model.Id}";
    }

    protected async Task GenerateFakeData()
    {
        this.Model = await Client.GenerateLink() ?? new();
    }

    private string CreateId() => Base36.Encode(Math.Abs(Guid.NewGuid().GetHashCode()));
}